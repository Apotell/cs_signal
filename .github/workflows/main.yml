name: 'main'

on: [ push ]

env:
  MODULE_NAME: CsSignal

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
        - { os: ubuntu-22.04, artifact-tag: jammy-gcc, build-type: debug }
        - { os: ubuntu-22.04, artifact-tag: jammy-gcc, build-type: release }
        - { os: windows-2022, artifact-tag: windows-cl, build-type: debug }
        - { os: windows-2022, artifact-tag: windows-cl, build-type: release }

    runs-on: ${{ matrix.config.os }}

    steps:
    - name: Install Core Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -qq
        sudo apt install -y g++-11
        sudo apt install -y cmake
        sudo apt install -y build-essential
        sudo apt install -y ninja-build

    - name: Setup environment
      shell: bash
      run: |
        git config --global core.autocrlf input

        echo "ARTIFACT_NAME=${{ matrix.config.artifact-tag }}_${{ matrix.config.build-type }}" >> $GITHUB_ENV

    - name: Pull Source
      uses: actions/checkout@v4

    - name: Build on Linux
      if: runner.os == 'Linux'
      shell: bash
      env:
        CC: gcc-11
        CXX: g++-11
      run: |
        env
        which cmake && cmake --version
        which ninja && ninja --version
        which $CC && $CC --version
        which $CXX && $CXX --version

        if [[ "${{ matrix.config.build-type }}" == "debug" ]]; then
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=out/install/static -S . -B out/build/static
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=out/install/shared -S . -B out/build/shared
        else
          cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=out/install/static -S . -B out/build/static
          cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=out/install/shared -S . -B out/build/shared
        fi

        cmake --build out/build/static -j `nproc`
        cmake --install out/build/static

        cmake --build out/build/shared -j `nproc`
        cmake --install out/build/shared

    - name: Build on Windows
      if: runner.os == 'Windows'
      shell: cmd
      env:
        CC: cl
        CXX: cl
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

        set
        where cmake && cmake --version
        where ninja && ninja --version
        where %CC% && %CC%
        where %CXX% && %CXX%

        if "${{ matrix.config.build-type }}" EQU "debug" (
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=out/install/static -S . -B out/build/static
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=out/install/shared -S . -B out/build/shared
        ) else (
          cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=out/install/static -S . -B out/build/static
          cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=out/install/shared -S . -B out/build/shared
        )

        cmake --build out/build/static -j %NUMBER_OF_PROCESSORS%
        if %errorlevel% neq 0 exit /b %errorlevel%
        cmake --install out/build/static
        if %errorlevel% neq 0 exit /b %errorlevel%

        cmake --build out/build/shared -j %NUMBER_OF_PROCESSORS%
        if %errorlevel% neq 0 exit /b %errorlevel%
        cmake --install out/build/shared

    - name: Build compressed artifacts
      shell: bash
      run: |
        cd out
        mkdir -p ${{ env.ARTIFACT_NAME }}/bin/${{ env.ARTIFACT_NAME }}
        mkdir -p ${{ env.ARTIFACT_NAME }}/lib/${{ env.ARTIFACT_NAME }}

        cp ../deploy/CMakeLists.txt ${{ env.ARTIFACT_NAME }}/.
        cp -r install/static/lib/* ${{ env.ARTIFACT_NAME }}/lib/${{ env.ARTIFACT_NAME }}/.
        mv install/static/include ${{ env.ARTIFACT_NAME }}/.

        if [[ "${{ env.RUNNER_OS }}" == "Windows" ]]; then
          cp -r install/shared/bin/* ${{ env.ARTIFACT_NAME }}/bin/${{ env.ARTIFACT_NAME }}/.
          mv install/shared/cmake ${{ env.ARTIFACT_NAME }}/.
        fi

        tar czfp ${{ env.ARTIFACT_NAME }}.tar.gz ${{ env.ARTIFACT_NAME }}

    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: out/${{ env.ARTIFACT_NAME }}.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Get top commit details
      uses: actions/github-script@0.3.0
      id: author-date
      with:
        github-token: ${{ secrets.GHA_DAVENCHE_CI_TOKEN }}
        script: |
          const commit_details = await github.git.getCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha
          });
          return commit_details.data.author.date

    - name: Setup environment
      run: |
        export COMMITTED_AT=$(date -d ${{ steps.author-date.outputs.result }} +'%Y.%m.%d_%H.%M.%S')
        echo "COMMITTED_AT=$COMMITTED_AT" >> $GITHUB_ENV

        echo "ARTIFACT_JAMMY_GCC_DEBUG=jammy-gcc_debug" >> $GITHUB_ENV
        echo "ARTIFACT_JAMMY_GCC_RELEASE=jammy-gcc_release" >> $GITHUB_ENV
        echo "ARTIFACT_WINDOWS_CL_DEBUG=windows-cl_debug" >> $GITHUB_ENV
        echo "ARTIFACT_WINDOWS_CL_RELEASE=windows-cl_release" >> $GITHUB_ENV

    - name: Download artifacts
      uses: actions/download-artifact@v3

    - name: List directory contents
      run: ls -R

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.COMMITTED_AT }}
        target_commitish: ${{ github.sha }}
        token: ${{ secrets.GHA_DAVENCHE_CI_TOKEN }}
        files: |
          ${{ env.ARTIFACT_JAMMY_GCC_DEBUG }}/${{ env.ARTIFACT_JAMMY_GCC_DEBUG }}.tar.gz
          ${{ env.ARTIFACT_JAMMY_GCC_RELEASE }}/${{ env.ARTIFACT_JAMMY_GCC_RELEASE }}.tar.gz
          ${{ env.ARTIFACT_WINDOWS_CL_DEBUG }}/${{ env.ARTIFACT_WINDOWS_CL_DEBUG }}.tar.gz
          ${{ env.ARTIFACT_WINDOWS_CL_RELEASE }}/${{ env.ARTIFACT_WINDOWS_CL_RELEASE }}.tar.gz

    - name: Delete some old releases
      uses: dev-drprasad/delete-older-releases@v0.3.2
      with:
        keep_latest: 5
      env:
        GITHUB_TOKEN: ${{ secrets.GHA_DAVENCHE_CI_TOKEN }}
